<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Interview Summary</title>
    <link href="/2020/12/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2020/12/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>前端面试总结</p><a id="more"></a><h5 id="1、盒子模型"><a href="#1、盒子模型" class="headerlink" title="1、盒子模型"></a>1、盒子模型</h5><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p><p>不同部分的说明：</p><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul><h5 id="2、https加密"><a href="#2、https加密" class="headerlink" title="2、https加密"></a>2、https加密</h5><p>https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。</p><p>Https协议需要ca证书，费用较高。https则是具有安全性的ssl加密传输协议。</p><h5 id="3、css实现两栏布局、左边固定、右边自适应"><a href="#3、css实现两栏布局、左边固定、右边自适应" class="headerlink" title="3、css实现两栏布局、左边固定、右边自适应"></a>3、css实现两栏布局、左边固定、右边自适应</h5><p><a href="https://segmentfault.com/a/1190000010698609">https://segmentfault.com/a/1190000010698609</a></p><h5 id="4、vue与react的区别"><a href="#4、vue与react的区别" class="headerlink" title="4、vue与react的区别"></a>4、vue与react的区别</h5><p><a href="https://blog.csdn.net/qq_37617413/article/details/90669216">https://blog.csdn.net/qq_37617413/article/details/90669216</a></p><h5 id="5、vue的双向绑定原理"><a href="#5、vue的双向绑定原理" class="headerlink" title="5、vue的双向绑定原理"></a>5、vue的双向绑定原理</h5><p>vue的数据双向绑定主要通过Object.defineProperty()方法来进行数据劫持以及发布者-订阅模式来实现的，</p><ul><li>具体怎么实现的呢？</li></ul><p>要想实现数据的双向绑定首先就要通过数据拦截来进行监听数据的改变，这个时候就要设置一个监听器Observer来进行监听，如果属性发生改变的话就告诉订阅者Watcher看看是否需要改变，同时的话订阅者可以有好多个，我们就用一个订阅者管理器(Dep)来管理这些订阅者。紧接着我们还要有个指令解析器来对每个节点进行扫描和解析（解析节点的指令如v-on）,把他们初始化成一个订阅器Watcher,并且绑定相应的函数，Watcher会对比前后两个的数值是否发生变化，然后确定是否通知视图进行重新渲染；</p><h5 id="6、vuex的核心属性"><a href="#6、vuex的核心属性" class="headerlink" title="6、vuex的核心属性"></a>6、vuex的核心属性</h5><ul><li>state:vuex的基本数据，提供唯一 的公共数据源，所有共享的数据都要统一放在store中的state中，使用单一状态树，包含我们所需要的基本状态参数</li><li>getter：相当于State的计算属性</li><li>mutation:更新数据的方法，同步方式</li><li>action:功能和mutaion大致相同，action是通过提交mutation来更改状态。</li><li>module:整个store对象集中到一个很大的对象，将store分割到很多模块，使得每个模块拥有自己的属性</li></ul><h5 id="7、box-sizing的使用场景"><a href="#7、box-sizing的使用场景" class="headerlink" title="7、box-sizing的使用场景"></a>7、box-sizing的使用场景</h5><p>首先盒子模型：ie盒子模型和标准W3C盒子模型</p><ul><li>标准盒子模型：width=content  height=content</li><li>ie盒子模型：width=margin+border+padding+content</li></ul><p>1、考虑到盒子的大小设置会比较麻烦，有时设置的width，结果最后大小不是之前设置的大小，所以这时就要box-sizing登场了，当我们设置box-sizing:border-box以后，如果我们想要一个宽度100的盒子，直接设置width为100，就不用考虑该盒子是否为标准盒子了。这是box-sizing最实用的一个属性。等于：siting-width=border+padding+content-width;（为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度）</p><p>2、当box-sizing设置成content-box后，等于标准情况：siting-width=conten-width;（在宽度和高度之外绘制元素的内边距和边框。）</p><h5 id="8、弹性flex布局"><a href="#8、弹性flex布局" class="headerlink" title="8、弹性flex布局"></a>8、弹性flex布局</h5><p>给予容器控制内部元素高度和宽度的能力。</p><p>在webkit内核的浏览器使用时，必须加上**-webkit-**前缀</p><ul><li>Google Chrome 谷歌浏览器</li><li>Safari浏览器</li><li>搜狗高速浏览器</li><li>遨游浏览器3</li><li>QQ浏览器</li><li>360极速浏览器</li><li>世界之窗浏览器</li><li>阿里云浏览器</li></ul><p>使用flex的容器，它内部的元素自动成为flex项目。容器拥有两根隐形的轴，水平的主轴和竖直的交叉轴，主轴与左边框的交点为main start,主轴与右边框的交点为main end,交叉轴的起点为cross start,交叉轴结束的位置成位cross end,项目的主轴宽度为main size,交叉轴方向上的宽度为cross size.同时flex item的float、clear、vertical-align属性将失效。</p><p>felx的相关的示意图见下链：</p><p><a href="https://images2015.cnblogs.com/blog/1008386/201608/1008386-20160829212313605-763604383.png">https://images2015.cnblogs.com/blog/1008386/201608/1008386-20160829212313605-763604383.png</a></p><ul><li><p>容器的属性</p><ol><li><p>flex-direction:</p><ul><li>row:主轴为水平方向，项目沿主轴从左至右排列</li><li>column:主轴为竖直方向，项目沿主轴从上至下排列</li><li>row-reverse:主轴水平，项目从右至左排列，与row反向</li><li>column-reverse:主轴竖直，项目从下至上排列，与column反向</li></ul></li><li><p>flex-wrap</p><ul><li>nowrap:自动缩小项目，不换行</li><li>wrap:换行，且第一行在上方</li><li>wrap-reverse:换行，第一行在下面</li></ul></li><li><p>flex-flow</p><p>  是flex-direction和flex-wrap的简写形式，有row wrap|column wrap-reverse等, 默认值为row nowrap</p></li><li><p>justify-content</p><p>决定item在主轴上的对齐方式，可能的值有flex-start(默认）</p><ul><li>flex-start:左对齐</li><li>flex-end:右对齐</li><li>center:居中对齐</li><li>space-between:两端对齐</li><li>space-around:沿轴线均匀分布</li></ul></li><li><p>align-items</p><p>决定item在交叉轴上的对齐方式</p><ul><li>flex-start:顶端对齐</li><li>flex-end:底部对齐</li><li>center:竖直方向上居中对齐</li><li>baseline:item第一行文字的底部对齐</li><li>stretch:当item未设置高度时，item将和容器等高对齐</li></ul></li><li><p>align-content</p><p>该属性定义了当有很多根主轴时，即item不止一行时，多行在交叉轴轴上的对齐方式。注意当有多行时，align-items属性将失效</p><ul><li>flex-start:左对齐</li><li>flex-end:右对齐</li><li>center:居中对齐</li><li>space-between:两端对齐</li><li>space-around:沿轴线均匀分布</li></ul></li></ol></li><li><p>项目属性</p><ol><li><p>order</p><p>order的值越小，项目排列越靠前</p></li><li><p>flex-grow</p><p>定义了当flex容器有多余空间时，item是否放大。默认值为0，即当有多余空间时也不放大，数值为对应的项目的放大比列。</p></li><li><p>flex-shrink</p><p>定义了当容器空间不足时，item是否缩小。默认值为1，当空间不足时，项目自动缩小。其可能的值为整数，表示不同的项目的缩小比例</p></li><li><p>flex-basis</p><p>表示项目的主轴占据的空间，默认值为auto。</p></li><li><p>flex</p><p>属性是flex-grow、flex-shrink和flex-basis三属性的简写总和</p></li><li><p>align-self</p><ul><li><p>auto: 和父元素align-self的值一致</p></li><li><p>flex-start:顶端对齐</p></li><li><p>flex-end:底部对齐</p></li><li><p>center:竖直方向上居中对齐</p></li><li><p>baseline: 项目的第一行文字的底部对齐</p></li><li><p>stretch: 当项目未设置高度时，item将和容器等高对齐</p><p>【参考链接】：<a href="https://www.cnblogs.com/nuannuan7362/p/5823381.html">https://www.cnblogs.com/nuannuan7362/p/5823381.html</a></p></li></ul></li></ol></li></ul><h5 id="9、什么是闭包"><a href="#9、什么是闭包" class="headerlink" title="9、什么是闭包"></a>9、什么是闭包</h5><p><strong>「函数」和「函数内部能访问到的变量」（也叫环境）的总和，就是一个闭包。</strong></p><p>希望能够把变量给隐藏了。</p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/22486908">https://zhuanlan.zhihu.com/p/22486908</a></p><h5 id="10、箭头函数和普通函数"><a href="#10、箭头函数和普通函数" class="headerlink" title="10、箭头函数和普通函数"></a>10、箭头函数和普通函数</h5><p>箭头函数本身没用prototype所以箭头函数本身没用this</p><p>箭头函数的this永远指向其上下文，call()、bind()、apply()改变不了其this的指向</p><p>普通函数的this指向调用它的那个对象</p><p>箭头函数相当于一个匿名函数，不能作为构造函数，不能new</p><p>箭头函数对比：<a href="https://www.cnblogs.com/shamszhang/p/10530298.html">https://www.cnblogs.com/shamszhang/p/10530298.html</a></p><h5 id="11、flex-1代表什么"><a href="#11、flex-1代表什么" class="headerlink" title="11、flex:1代表什么"></a>11、flex:1代表什么</h5><p><a href="https://zhuanlan.zhihu.com/p/136223806">https://zhuanlan.zhihu.com/p/136223806</a></p><h5 id="12、什么是BFC，如何清除浮动"><a href="#12、什么是BFC，如何清除浮动" class="headerlink" title="12、什么是BFC，如何清除浮动"></a>12、什么是BFC，如何清除浮动</h5><p>Block formatting context 块级格式上下文，它是一个独立的渲染区域。具有BDC特性的元素可以看作是隔离的独立容器，容器里的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没用的一些特性。</p><p>清除浮动：<a href="https://blog.csdn.net/h_qingyi/article/details/81269667">https://blog.csdn.net/h_qingyi/article/details/81269667</a></p><p>clear:both   overflow:hidden</p><p> 都不如双伪元素清除浮动,不仅可以清除浮动，也可以解决高度坍塌的问题。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">display</span>: table;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">/*不用有内容也可以*/</span><br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>    <span class="hljs-attribute">*zoom</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>BFC: <a href="https://zhuanlan.zhihu.com/p/25321647">https://zhuanlan.zhihu.com/p/25321647</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript,css</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
